{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Genesis Code Documentation This is the documentation about the Genesis Code Extension for Visual Studio Code. What do you found in this page? Documentation about the instalation and configuration of the extension in Visual Studio Code. Documentation about the commands provided by Genesis Code extension. Some information about issues and solutions. More information about the use with SGDK or GENDEV projects.","title":"Home"},{"location":"#welcome-to-genesis-code-documentation","text":"This is the documentation about the Genesis Code Extension for Visual Studio Code.","title":"Welcome to Genesis Code Documentation"},{"location":"#what-do-you-found-in-this-page","text":"Documentation about the instalation and configuration of the extension in Visual Studio Code. Documentation about the commands provided by Genesis Code extension. Some information about issues and solutions. More information about the use with SGDK or GENDEV projects.","title":"What do you found in this page?"},{"location":"bitmap/","text":"Bitmap Viewer Since 1.3.3 version, you can see the Custom Image Viewer; with this editor, you can see some Image Information like width, height, tiles or colour palette. In this editor you can see: Image file name. Image Preview. Image width in pixels. Image height in pixels. Image width in tiles (8x8). Image height in tiles (8x8). Image Palette The bitmap Viewer is compatible with the next image formats: BMP PNG JPEG JPG To open a Image with this editor, rigth click in the tab titble and select the option of Reopen Editor With... , and select SGDK Image Preview .","title":"Bitmap Viewer"},{"location":"bitmap/#bitmap-viewer","text":"Since 1.3.3 version, you can see the Custom Image Viewer; with this editor, you can see some Image Information like width, height, tiles or colour palette. In this editor you can see: Image file name. Image Preview. Image width in pixels. Image height in pixels. Image width in tiles (8x8). Image height in tiles (8x8). Image Palette The bitmap Viewer is compatible with the next image formats: BMP PNG JPEG JPG To open a Image with this editor, rigth click in the tab titble and select the option of Reopen Editor With... , and select SGDK Image Preview .","title":"Bitmap Viewer"},{"location":"commands/","text":"Commands Genesis Code provides the next commands: Compile Project. Clean Project. Run Project. Compile & Run Project. Create Project. Set Gens Command path. Compile for Debugging. Import a new TMX file. Import a new Json TMX file. NOTE : All the commands start with \"Genesis Code: \". Compile Project This command, allow to compile the project using the SGDK makefile. With this command the resources are procesed too (images, sprites, music,...). Its important to set the GDK/GDK_WIN or the GENDEV enviroment variables. Clean Project This command, allows you to clean the project using the SGDK makefile. This command will remove the rom.bin file and some generated files. See SGDK project for more information. Run Project This command, allows you to run the rom generated binary with an Emulator. Its open the emulator with the current rom.bin file that is inside the out folder of the current project. NOTE : You need to configure the Gens Emulator command path in the Genesis Code Configuration. Compile & Run Project This command, first compile the project and later run the generated rom.bin file with the current emulator. NOTE : You need to configure the Emulator command path in the Genesis Code Configuration. Create Project This command, allows you to create a new project for use with SGDK or GENDEV. This command, first, allow you to select the folder where the project will be created. Later, will be create three folders (src, inc and res); and initialize a git repository with the .gitignore file. For last, a hello world example will be created. From v1.5.1 of Genesis Code when a new Project is created the C/C++ settings configuration is created using the current configuration values instead using System Environment variables(using the variables configuration of current Toolchain). If there is no value for the current configuration, the System Environment variable value is used. MarsDev If you create the project with the MarsDev toolchain selected in the genesis code Settings, the project is created for use with this toolchain adding a MakeFile and all the files needed for use it with MarsDev. Debugging If you create a new project, it create an .vscode folder that contains the file launch.json the debugging configuration for use GDB for remote debugging. Set Gens Command path This command, allows you to configure the Gens Emulator Command in the Genesis Code Configuration. This command show a input box for set the Emulator Command. NOTE : You can use others emulators like Blastem . Compile For Debugging This command, compile the project with the debug options. This command, change if the toolchain selected in settings is SGDK/GENDEV or MARSDEV. NOTE: Due to problems with GENDEV project; dosen't have the libmd.a lib with the debug options, you can't use this command on Linux Systems. Import TMX file This command, allows you to create a header C File (.h) from a TMX (XML) format file. Import Json TMX File This command, allows you to create a header C file (.h) from a TMX Json (.json) format file.","title":"Commands"},{"location":"commands/#commands","text":"Genesis Code provides the next commands: Compile Project. Clean Project. Run Project. Compile & Run Project. Create Project. Set Gens Command path. Compile for Debugging. Import a new TMX file. Import a new Json TMX file. NOTE : All the commands start with \"Genesis Code: \".","title":"Commands"},{"location":"commands/#compile-project","text":"This command, allow to compile the project using the SGDK makefile. With this command the resources are procesed too (images, sprites, music,...). Its important to set the GDK/GDK_WIN or the GENDEV enviroment variables.","title":"Compile Project"},{"location":"commands/#clean-project","text":"This command, allows you to clean the project using the SGDK makefile. This command will remove the rom.bin file and some generated files. See SGDK project for more information.","title":"Clean Project"},{"location":"commands/#run-project","text":"This command, allows you to run the rom generated binary with an Emulator. Its open the emulator with the current rom.bin file that is inside the out folder of the current project. NOTE : You need to configure the Gens Emulator command path in the Genesis Code Configuration.","title":"Run Project"},{"location":"commands/#compile-run-project","text":"This command, first compile the project and later run the generated rom.bin file with the current emulator. NOTE : You need to configure the Emulator command path in the Genesis Code Configuration.","title":"Compile &amp; Run Project"},{"location":"commands/#create-project","text":"This command, allows you to create a new project for use with SGDK or GENDEV. This command, first, allow you to select the folder where the project will be created. Later, will be create three folders (src, inc and res); and initialize a git repository with the .gitignore file. For last, a hello world example will be created. From v1.5.1 of Genesis Code when a new Project is created the C/C++ settings configuration is created using the current configuration values instead using System Environment variables(using the variables configuration of current Toolchain). If there is no value for the current configuration, the System Environment variable value is used.","title":"Create Project"},{"location":"commands/#marsdev","text":"If you create the project with the MarsDev toolchain selected in the genesis code Settings, the project is created for use with this toolchain adding a MakeFile and all the files needed for use it with MarsDev.","title":"MarsDev"},{"location":"commands/#debugging","text":"If you create a new project, it create an .vscode folder that contains the file launch.json the debugging configuration for use GDB for remote debugging.","title":"Debugging"},{"location":"commands/#set-gens-command-path","text":"This command, allows you to configure the Gens Emulator Command in the Genesis Code Configuration. This command show a input box for set the Emulator Command. NOTE : You can use others emulators like Blastem .","title":"Set Gens Command path"},{"location":"commands/#compile-for-debugging","text":"This command, compile the project with the debug options. This command, change if the toolchain selected in settings is SGDK/GENDEV or MARSDEV. NOTE: Due to problems with GENDEV project; dosen't have the libmd.a lib with the debug options, you can't use this command on Linux Systems.","title":"Compile For Debugging"},{"location":"commands/#import-tmx-file","text":"This command, allows you to create a header C File (.h) from a TMX (XML) format file.","title":"Import TMX file"},{"location":"commands/#import-json-tmx-file","text":"This command, allows you to create a header C file (.h) from a TMX Json (.json) format file.","title":"Import Json TMX File"},{"location":"debug/","text":"Debugging Options Genesis code, can help you to create a configuration for remote debugging with GDB. With this configuration you can use an emulator like GensKMod or Blastem for open a remote debug session using GDB. When you create a new Project Genesis code, adds a folder called .vscode that contains all the configuration of your project. Now Genesis code create a launch.json file with the minimum configuration for open a remote debuging session. NOTE : This file depends of your Operating System and the Toolchain selected on the Genesis code Settings (SGDK/GENDEV or MARSDEV). REMEMBER : Before open a debug session you need to call the Genesis Code: Compile with Debug Options command. Lets see one example of the launch.json file: { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Debug with gdb remote\", \"request\": \"launch\", \"type\": \"cppdbg\", \"program\": \"${workspaceRoot}\\\\out\\\\rom.out\", \"miDebuggerServerAddress\": \"localhost:6868\", \"sourceFileMap\": { \"d:\\\\apps\\\\sgdk\\\\src\\\\\": \"${env:GDK}\\\\src\\\\\", }, \"args\": [], \"stopAtEntry\": true, \"cwd\": \"${workspaceFolder}\", \"environment\": [], \"externalConsole\": false, \"MIMode\": \"gdb\", \"launchCompleteCommand\": \"exec-continue\", \"miDebuggerPath\": \"${env:GDK}\\\\bin\\\\gdb.exe\", \"setupCommands\": [ { \"text\": \"set directories '${workspaceFolder};$cwd;$cdir'\" } ], } ] } NOTE: This json file corresponds to the Windows SGDK version. Lets see some properties of this file: program : The program that need to be used with GDB; this is one of the files created when you compile with debug options; contains information about the Symbols table. miDebuggerServerAddress : Address and port used for connect with the emulator. Change the port when you use GensKMod or Blastem. This is only used on Windows System. sourceFileMap : The libmd used in SGDK, contains the statics source file paths; so you need to reconfigure them for your SGDK instalation folder. miDebuggerPath : This is the path of your GDB executable. NOTE : Some versions of Blastem, can crash when is used with vscode debugging session; this is a unimplemented features in Blastem for the GDB protocol. If you need more information about how to debug with VSCODE, please see VSCODE Debug Configuration page . Also, you can see more information in the GDB web page .","title":"Debug"},{"location":"debug/#debugging-options","text":"Genesis code, can help you to create a configuration for remote debugging with GDB. With this configuration you can use an emulator like GensKMod or Blastem for open a remote debug session using GDB. When you create a new Project Genesis code, adds a folder called .vscode that contains all the configuration of your project. Now Genesis code create a launch.json file with the minimum configuration for open a remote debuging session. NOTE : This file depends of your Operating System and the Toolchain selected on the Genesis code Settings (SGDK/GENDEV or MARSDEV). REMEMBER : Before open a debug session you need to call the Genesis Code: Compile with Debug Options command. Lets see one example of the launch.json file: { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Debug with gdb remote\", \"request\": \"launch\", \"type\": \"cppdbg\", \"program\": \"${workspaceRoot}\\\\out\\\\rom.out\", \"miDebuggerServerAddress\": \"localhost:6868\", \"sourceFileMap\": { \"d:\\\\apps\\\\sgdk\\\\src\\\\\": \"${env:GDK}\\\\src\\\\\", }, \"args\": [], \"stopAtEntry\": true, \"cwd\": \"${workspaceFolder}\", \"environment\": [], \"externalConsole\": false, \"MIMode\": \"gdb\", \"launchCompleteCommand\": \"exec-continue\", \"miDebuggerPath\": \"${env:GDK}\\\\bin\\\\gdb.exe\", \"setupCommands\": [ { \"text\": \"set directories '${workspaceFolder};$cwd;$cdir'\" } ], } ] } NOTE: This json file corresponds to the Windows SGDK version. Lets see some properties of this file: program : The program that need to be used with GDB; this is one of the files created when you compile with debug options; contains information about the Symbols table. miDebuggerServerAddress : Address and port used for connect with the emulator. Change the port when you use GensKMod or Blastem. This is only used on Windows System. sourceFileMap : The libmd used in SGDK, contains the statics source file paths; so you need to reconfigure them for your SGDK instalation folder. miDebuggerPath : This is the path of your GDB executable. NOTE : Some versions of Blastem, can crash when is used with vscode debugging session; this is a unimplemented features in Blastem for the GDB protocol. If you need more information about how to debug with VSCODE, please see VSCODE Debug Configuration page . Also, you can see more information in the GDB web page .","title":"Debugging Options"},{"location":"install/","text":"Installation You can find Genesis Code in the Microsoft Marketplace for Extensions ; when you find the extension click on install via web or via visual studio code. You also, can install via our release tags on the Github Repository of Genesis Code and install using visual studio code Extension Instalation Command . Configuration To use Genesis code, you need to configure two important things. First, you need to install and configure your Genesis Development Kit; it can be SGDK or GENDEV projects. Its important to set the enviroment variable of GDK for SGDK projects, or GENDEV enviroment variable for GENDEV based project. set %GDK%=f:/sgdk export GENDEV=/opt/gendev For more information you can see the repositories of SGDK or GENDEV . After configure the SGDK or GENDEV enviroment, we need to configure the Gens path command. Configure all settings for the extension First of all you need to go a section to configure your Genesis Code extension. This is located in Visual Studio Code following menu : File -> Prefernces -> Settings [Ctrl+,]. Go to Extensions -> Genesis Code, now you can start configuring as your preferences. Configuration with build using Docker (since v1.4.x) Genesis Code is compatible build using docker. Previously you should be created a docker image, Genesis Code asume your are followed stepd in the SGDK repo. If you want to build using docker, you should be select a toolchain Docker in the Genesis Code settings. If you want to use docker adding a tag, you can set in the Docker Tag section. If you want to use an alternative SGDK Docker Image like Doragasu SGDK Docker Image , you can enable the check to active this feature, and don't forget to add the current Gitlab Registry Docker Tag. Configuration with MarsDev (since v1.2.0) Genesis Code is compatible with MarsDev toolchain. Only you need to do is install MarsDev and select the toolchain in the Genesis Code settings. For more information with MarsDev toolchain, please go to MarsDev Github Repo . Configuration in MaCOs (since v1.1.0)(Deprecated) To use SGDK and Genesis code in MacOs, you need to install and configure Wine for use with SGDK. Follow the next instructions for install and configure SGDK with Wine in MacOs. 1 . Install brew on your system. 2 . Create and configure the installation directory: sudo mkdir /opt/gendev/ sudo chown $USER: /opt/gendev 3 . Set the next environment Variables. export GENDEV=/opt/gendev export GDK='c:/sgdk' export GDK_WIN='c:\\sgdk' NOTE : Remember to put this variables into your bash_profile to make them permanent. 4 . Install the packages needed with brew . brew cask install xquartz brew install wine 5 . Configure wine mkdir $GENDEV/wine WINDEBUG=-all WINEARCH=win64 WINEPREFIX=$GENDEV/wine wineboot 6 . clone SGDK project using git. cd $GENDEV git clone https://github.com/Stephane-D/SGDK.git ln -sv $GENDEV/SGDK $GENDEV/wine/drive_c sgdk 7 . For use Java with SGDK for the resource management you need to install Java in the wine system. First, you need to dowload the JDK (using oracle or openjdk); its important to download the x86 version (32 bits). Once downloaded we need to install it in wine. cd <your folder where the jdk installer is downloaded> WINEPREFIX=$GENDEV/wine wine64 cmd z:\\> jdk-8u221-windows-i586.exe /s 8 . Once java is instaled in wine, we need to configure the wine environment variables to add java to the Path variable. WINEPREFIX=$GENDEV/wine wine regedit This will open the register editor in wine; now we need to go the the next register path: HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment ; and change the PATH variable adding the current windows java path. 9 . For last, we need to compile and build all the tools in SGDK. WINEPREFIX=$GENDEV/wine wine64 cmd %GDK_WIN%\\bin\\make -f %GDK_WIN%\\makelin.gen NOTE: thanks to the https://github.com/v4ld3r5/sgdk_vscode_template.git project for this configuration. NOTE2: You can see some errors due to MacOs 32bits limitations; check the MacOs Documentation for more information. WARNING : THis is a deprecated configuration and will be changed in the future. Configure Terminal (Windows) If you get an error using genesis code commands like: Cannot load'%GDK%' module. for more information, please run 'Import-Module %GDK%'. NOTE : Since v1.5.1 of Genesis Code this Configuration is made when a new Project is created. No more extra configuration is needed. This is because you are using PowerShell instead CMD Prompt; you can fix this in two ways: Run cmd command on gens-code terminal. Change default terminal, using the command >Terminal: Select default Profile and select Command Prompt (cmd). Configure Headers using Docker containers If you are going to use Docker containers, the C headers don't work; this is due the SGDK headers are inside the Docker container and are not from outside the container (without adding a volume). To fix this, we need to change the project configuration and add the SGDK's headers path. Follow the next steps to add the headers to vscode settings: Download SGDK from the release page ; don't worry about windows version. Locate the .vscode folder inside your project folder. Edit the settings.json file with the following content: { \"C_Cpp.default.includePath\": [\"{sgdkpath}/inc\", \"{sgdkpath}/res\", \"res\", \"inc\" ] } NOTE: Change the {sgdkpath} to your SGDK's folder path. Gens Path Command Configuration To use an Emulator like Gens you need to configure your gens path Command Configuration. This configuration store you gens command to call the emulator and open the attached rom binary. In this case you can set it by tow ways. The first way is using the Genesis Code Configuration. You can see the settings section in your visual studio instalation using the menu File->preferences->settings (or with the ctrl+, shortcut). The second way is using the Set run path Command; this command allows you to put the Gens Emulator command in one Input Box. For more information, please see commands section. NOTE : You can use other emulators like Blastem . Add Status Bar auxiliary Buttons You can add Auxiliary Buttons at the status bar for compile, compile for debugging, compile & run and clean the current project. Only check the current configuration and you can see the status bar auxiliary buttons at the current status bar.","title":"Install"},{"location":"install/#installation","text":"You can find Genesis Code in the Microsoft Marketplace for Extensions ; when you find the extension click on install via web or via visual studio code. You also, can install via our release tags on the Github Repository of Genesis Code and install using visual studio code Extension Instalation Command .","title":"Installation"},{"location":"install/#configuration","text":"To use Genesis code, you need to configure two important things. First, you need to install and configure your Genesis Development Kit; it can be SGDK or GENDEV projects. Its important to set the enviroment variable of GDK for SGDK projects, or GENDEV enviroment variable for GENDEV based project. set %GDK%=f:/sgdk export GENDEV=/opt/gendev For more information you can see the repositories of SGDK or GENDEV . After configure the SGDK or GENDEV enviroment, we need to configure the Gens path command.","title":"Configuration"},{"location":"install/#configure-all-settings-for-the-extension","text":"First of all you need to go a section to configure your Genesis Code extension. This is located in Visual Studio Code following menu : File -> Prefernces -> Settings [Ctrl+,]. Go to Extensions -> Genesis Code, now you can start configuring as your preferences.","title":"Configure all settings for the extension"},{"location":"install/#configuration-with-build-using-docker-since-v14x","text":"Genesis Code is compatible build using docker. Previously you should be created a docker image, Genesis Code asume your are followed stepd in the SGDK repo. If you want to build using docker, you should be select a toolchain Docker in the Genesis Code settings. If you want to use docker adding a tag, you can set in the Docker Tag section. If you want to use an alternative SGDK Docker Image like Doragasu SGDK Docker Image , you can enable the check to active this feature, and don't forget to add the current Gitlab Registry Docker Tag.","title":"Configuration with build using Docker (since v1.4.x)"},{"location":"install/#configuration-with-marsdev-since-v120","text":"Genesis Code is compatible with MarsDev toolchain. Only you need to do is install MarsDev and select the toolchain in the Genesis Code settings. For more information with MarsDev toolchain, please go to MarsDev Github Repo .","title":"Configuration with MarsDev (since v1.2.0)"},{"location":"install/#configuration-in-macos-since-v110deprecated","text":"To use SGDK and Genesis code in MacOs, you need to install and configure Wine for use with SGDK. Follow the next instructions for install and configure SGDK with Wine in MacOs. 1 . Install brew on your system. 2 . Create and configure the installation directory: sudo mkdir /opt/gendev/ sudo chown $USER: /opt/gendev 3 . Set the next environment Variables. export GENDEV=/opt/gendev export GDK='c:/sgdk' export GDK_WIN='c:\\sgdk' NOTE : Remember to put this variables into your bash_profile to make them permanent. 4 . Install the packages needed with brew . brew cask install xquartz brew install wine 5 . Configure wine mkdir $GENDEV/wine WINDEBUG=-all WINEARCH=win64 WINEPREFIX=$GENDEV/wine wineboot 6 . clone SGDK project using git. cd $GENDEV git clone https://github.com/Stephane-D/SGDK.git ln -sv $GENDEV/SGDK $GENDEV/wine/drive_c sgdk 7 . For use Java with SGDK for the resource management you need to install Java in the wine system. First, you need to dowload the JDK (using oracle or openjdk); its important to download the x86 version (32 bits). Once downloaded we need to install it in wine. cd <your folder where the jdk installer is downloaded> WINEPREFIX=$GENDEV/wine wine64 cmd z:\\> jdk-8u221-windows-i586.exe /s 8 . Once java is instaled in wine, we need to configure the wine environment variables to add java to the Path variable. WINEPREFIX=$GENDEV/wine wine regedit This will open the register editor in wine; now we need to go the the next register path: HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment ; and change the PATH variable adding the current windows java path. 9 . For last, we need to compile and build all the tools in SGDK. WINEPREFIX=$GENDEV/wine wine64 cmd %GDK_WIN%\\bin\\make -f %GDK_WIN%\\makelin.gen NOTE: thanks to the https://github.com/v4ld3r5/sgdk_vscode_template.git project for this configuration. NOTE2: You can see some errors due to MacOs 32bits limitations; check the MacOs Documentation for more information. WARNING : THis is a deprecated configuration and will be changed in the future.","title":"Configuration in MaCOs (since v1.1.0)(Deprecated)"},{"location":"install/#configure-terminal-windows","text":"If you get an error using genesis code commands like: Cannot load'%GDK%' module. for more information, please run 'Import-Module %GDK%'. NOTE : Since v1.5.1 of Genesis Code this Configuration is made when a new Project is created. No more extra configuration is needed. This is because you are using PowerShell instead CMD Prompt; you can fix this in two ways: Run cmd command on gens-code terminal. Change default terminal, using the command >Terminal: Select default Profile and select Command Prompt (cmd).","title":"Configure Terminal (Windows)"},{"location":"install/#configure-headers-using-docker-containers","text":"If you are going to use Docker containers, the C headers don't work; this is due the SGDK headers are inside the Docker container and are not from outside the container (without adding a volume). To fix this, we need to change the project configuration and add the SGDK's headers path. Follow the next steps to add the headers to vscode settings: Download SGDK from the release page ; don't worry about windows version. Locate the .vscode folder inside your project folder. Edit the settings.json file with the following content: { \"C_Cpp.default.includePath\": [\"{sgdkpath}/inc\", \"{sgdkpath}/res\", \"res\", \"inc\" ] } NOTE: Change the {sgdkpath} to your SGDK's folder path.","title":"Configure Headers using Docker containers"},{"location":"install/#gens-path-command-configuration","text":"To use an Emulator like Gens you need to configure your gens path Command Configuration. This configuration store you gens command to call the emulator and open the attached rom binary. In this case you can set it by tow ways. The first way is using the Genesis Code Configuration. You can see the settings section in your visual studio instalation using the menu File->preferences->settings (or with the ctrl+, shortcut). The second way is using the Set run path Command; this command allows you to put the Gens Emulator command in one Input Box. For more information, please see commands section. NOTE : You can use other emulators like Blastem .","title":"Gens Path Command Configuration"},{"location":"install/#add-status-bar-auxiliary-buttons","text":"You can add Auxiliary Buttons at the status bar for compile, compile for debugging, compile & run and clean the current project. Only check the current configuration and you can see the status bar auxiliary buttons at the current status bar.","title":"Add Status Bar auxiliary Buttons"},{"location":"otherfeatures/","text":"Other Features In this section, you can see another features related with genesis code. Syntax HighLigthing on Resource Files (Since v1.1.0) With Genesis code, you can see syntax Hightligthing for the SGDK Resource Files. With this features you can see the keywords and some other important sections about the resource files for SGDK (for use the rescomp tool). You can see an example in the next image: SGDK Resource Code Autocompletion (Since v1.1.1) With Genesis code, you can use contextual help ( ctrl + space ) for see the autocompletion help for the SGDK resource files. Use Custom Make File You can use a custom Make File using the settings of the extension; you can define the path of your custom Makefile. NOTE : In MacOs, you can't use custom makefile with the SGDK/GENDEV toolchain; this is due to the use of wine; we are working on a solution. Use custom Environment Variables You can use custom Environment variables for the GDK, GENDEV or MARSDEV variables. you can define it in the Genesis code Settings. NOTE : In MacOs, you can't use custom envvariables with the SGDK/GENDEV toolchain; this is due to the use of wine; we are working on a solution. Parallel Compilation (since 1.5.2) The new parameter configuration ( parallel compilation ); this parameter allows to use extra threads when the build or compilation script is launched. This option adds the -j flag when call to make. This flag will speedup the compilation time. By default this parameter is 1 . NOTE: The recomend flag is -j4 . Extra parameters (since 1.5.2) This new configuration parameter, allow to add extra parameters to the compilation script (make); this parameter is added before the current goals when the make executable is called. By default, this prameter is empty. Status Bar Auxiliary Buttons (Since 1.5.0) If you enable the auxiliary Bar buttons on configuration, you can see them at the status bar (bottom part of the editor). Pushing in each button enable one of the commonly used commands of Genesis Code. Debug : Compile for Debugging. Play : Compile & Run. Build : Compile. Clean : Clean. Remember that you can enable or disable theses buttons in the Genesis Code configuration.","title":"Other Features"},{"location":"otherfeatures/#other-features","text":"In this section, you can see another features related with genesis code.","title":"Other Features"},{"location":"otherfeatures/#syntax-highligthing-on-resource-files-since-v110","text":"With Genesis code, you can see syntax Hightligthing for the SGDK Resource Files. With this features you can see the keywords and some other important sections about the resource files for SGDK (for use the rescomp tool). You can see an example in the next image:","title":"Syntax HighLigthing on Resource Files (Since v1.1.0)"},{"location":"otherfeatures/#sgdk-resource-code-autocompletion-since-v111","text":"With Genesis code, you can use contextual help ( ctrl + space ) for see the autocompletion help for the SGDK resource files.","title":"SGDK Resource Code Autocompletion (Since v1.1.1)"},{"location":"otherfeatures/#use-custom-make-file","text":"You can use a custom Make File using the settings of the extension; you can define the path of your custom Makefile. NOTE : In MacOs, you can't use custom makefile with the SGDK/GENDEV toolchain; this is due to the use of wine; we are working on a solution.","title":"Use Custom Make File"},{"location":"otherfeatures/#use-custom-environment-variables","text":"You can use custom Environment variables for the GDK, GENDEV or MARSDEV variables. you can define it in the Genesis code Settings. NOTE : In MacOs, you can't use custom envvariables with the SGDK/GENDEV toolchain; this is due to the use of wine; we are working on a solution.","title":"Use custom Environment Variables"},{"location":"otherfeatures/#parallel-compilation-since-152","text":"The new parameter configuration ( parallel compilation ); this parameter allows to use extra threads when the build or compilation script is launched. This option adds the -j flag when call to make. This flag will speedup the compilation time. By default this parameter is 1 . NOTE: The recomend flag is -j4 .","title":"Parallel Compilation (since 1.5.2)"},{"location":"otherfeatures/#extra-parameters-since-152","text":"This new configuration parameter, allow to add extra parameters to the compilation script (make); this parameter is added before the current goals when the make executable is called. By default, this prameter is empty.","title":"Extra parameters (since 1.5.2)"},{"location":"otherfeatures/#status-bar-auxiliary-buttons-since-150","text":"If you enable the auxiliary Bar buttons on configuration, you can see them at the status bar (bottom part of the editor). Pushing in each button enable one of the commonly used commands of Genesis Code. Debug : Compile for Debugging. Play : Compile & Run. Build : Compile. Clean : Clean. Remember that you can enable or disable theses buttons in the Genesis Code configuration.","title":"Status Bar Auxiliary Buttons (Since 1.5.0)"},{"location":"tmx/","text":"Importing TMX Files With genesis code, you can use TMX files for generate a header C File with the information of your maps. You can use TMX file format or TMX json format for generate the header C file. For more info about the TMX file format, please see Map Editor Tiled Web page . To generate a header C file, only you have to do is execute the Genesis Code: import TMX file for generate from TMX format file or execute the Genesis Code: Import TMX json File for generate from the Json TMX Format. After select the TMX/ TMX json file Format, you can see in the res folder the header file with the Map information.","title":"TMX"},{"location":"tmx/#importing-tmx-files","text":"With genesis code, you can use TMX files for generate a header C File with the information of your maps. You can use TMX file format or TMX json format for generate the header C file. For more info about the TMX file format, please see Map Editor Tiled Web page . To generate a header C file, only you have to do is execute the Genesis Code: import TMX file for generate from TMX format file or execute the Genesis Code: Import TMX json File for generate from the Json TMX Format. After select the TMX/ TMX json file Format, you can see in the res folder the header file with the Map information.","title":"Importing TMX Files"}]}